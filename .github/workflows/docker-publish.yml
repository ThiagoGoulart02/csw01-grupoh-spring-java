name: Docker Build and Push

on:
  push:
    branches:
      - main  # Executa o workflow quando há um push no branch 'main'
  pull_request:
    branches:
      - main  # Executa o workflow para pull requests no branch 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configurar autenticação do Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build da imagem Docker
      - name: Build Docker image
        run: docker build -t rodrigolopesmichalski/csw01-grupoh-spring-java:latest .

      # Step 4: Push da imagem para o Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push rodrigolopesmichalski/csw01-grupoh-spring-java:latest

      # Step 5: Configurar AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 6: Configurar Node.js para o Serverless Framework
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 7: Instalar o Serverless Framework
      - name: Install Serverless Framework
        run: npm install -g serverless

      # Step 8: Deploy do Serverless
      - name: Deploy with Serverless
        run: serverless deploy

      # Step 9: Obter o endpoint do banco de dados RDS
      - name: Get RDS Endpoint
        id: rds-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances \
            --query "DBInstances[?DBInstanceIdentifier=='spring-boot-serverless-db'].Endpoint.Address" \
            --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      # Step 10: Configurar o application.properties dinamicamente
      - name: Configure Application Properties
        run: |
          echo "spring.datasource.url=jdbc:postgresql://$RDS_ENDPOINT:5432/mydatabase" >> src/main/resources/application.properties
          echo "spring.datasource.username=csww" >> src/main/resources/application.properties
          echo "spring.datasource.password=password" >> src/main/resources/application.properties